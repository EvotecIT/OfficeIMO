# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    exclude:
      - docs
      - .github
      - .vs
      - Assets
      - README.md
      - CHANGELOG.MD

pr:
  autoCancel: true
  branches:
    include:
      - '*'
  paths:
    exclude:
      - docs
      - .github
      - .vs
      - Assets
      - README.md
      - CHANGELOG.MD

pool:
  vmImage: 'ubuntu-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'
  #DotNet3Version: '3.x'
  DotNet6Version: '6.x'
  DotNet7Version: '7.x'
  DotNet8Version: '8.x'
  MSBuildArgs: '"/p:Platform=$(BuildPlatform)" "/p:Configuration=$(BuildConfiguration)" "/BinaryLogger:$(Build.SourcesDirectory)\$(ArtifactsDirectoryName)\msbuild.binlog"'

steps:
- task: NuGetToolInstaller@1
  displayName: 'Install Nuget Tool Installer'

#- script: |
#    brew update
#    brew tap caskroom/cask
#    brew install mono-libgdiplus
#  displayName: "Install Mono-libgdiplus"

- task: UseDotNet@2
  displayName: 'Install .NET 6.0'
  inputs:
    packageType: 'sdk'
    version: '6.0.x'

- task: UseDotNet@2
  displayName: 'Install .NET 7.0'
  inputs:
    packageType: 'sdk'
    version: '7.0.x'

- task: UseDotNet@2
  displayName: 'Install .NET 8.0'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

#- task: UseDotNet@2
#  displayName: Install .NET 3.1
#  inputs:
#    version: '3.1.x'
#    packageType: sdk
#    includePreviewVersions: false

# Add a Command To List the Current .NET SDKs (Sanity Check)
- task: CmdLine@2
  displayName: 'List available .NET SDKs'
  inputs:
    script: 'dotnet --list-sdks'

# - task: NuGetCommand@2
#   displayName: Install Nuget Packages
#   inputs:
#     restoreSolution: '$(solution)'

- task: DotNetCoreCLI@2
  displayName: 'Install Nuget Packages'
  inputs:
    command: restore
    projects: '**/*.csproj'

- task: CmdLine@2
  displayName: 'Install Global Tools...'
  inputs:
    targetType: 'inline'
    script: |
      dotnet tool install -g dotnet-reportgenerator-globaltool
  continueOnError: true

#- task: DotNetCoreCLI@2
#  displayName: 'Run Tests'
#  inputs:
#    command: 'test'
#    arguments: '--configuration $(buildConfiguration) --collect:"Xplat Code Coverage"'
#    publishTestResults: true
#    projects: '**/*.Tests.csproj'

#- task: DotNetCoreCLI@2
#  displayName: 'Run Unit Tests (.NET 3.1)'
#  inputs:
#    command: 'test'
#    arguments: '--framework netcoreapp3.1 /noautorsp'
#    testRunTitle: 'Linux .NET 3.1'
#  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests (.NET 6.0)'
  inputs:
    command: 'test'
    arguments: '--framework net6.0 /noautorsp'
    testRunTitle: 'Linux .NET 6.0'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests (.NET 7.0)'
  inputs:
    command: 'test'
    arguments: '--framework net7.0 /noautorsp'
    testRunTitle: 'Linux .NET 7.0'
  condition: succeededOrFailed()

- task: DotNetCoreCLI@2
  displayName: 'Run Unit Tests (.NET 8.0)'
  inputs:
    command: 'test'
    arguments: '--framework net8.0 /noautorsp'
    testRunTitle: 'Linux .NET 8.0'
  condition: succeededOrFailed()

#- task: PublishCodeCoverageResults@1
#  displayName: 'Publish Code Coverage Report'
#  inputs:
#    codeCoverageTool: 'Cobertura'
#    summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
