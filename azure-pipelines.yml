# Build and run tests for .NET Desktop or Windows classic desktop solutions.
# Add steps that publish symbols, save build artifacts, and more:
# https://docs.microsoft.com/azure/devops/pipelines/apps/windows/dot-net

trigger:
  batch: true
  branches:
    include:
      - master
  paths:
    exclude:
      - docs
      - .github
      - .vs
      - Assets
      - README.md
      - CHANGELOG.MD

pr:
  autoCancel: true
  branches:
    include:
      - '*'
  paths:
    exclude:
      - docs
      - .github
      - .vs
      - Assets
      - README.md
      - CHANGELOG.MD

pool:
  vmImage: 'windows-latest'

variables:
  solution: '**/*.sln'
  buildPlatform: 'Any CPU'
  buildConfiguration: 'Release'

steps:
- task: NuGetToolInstaller@1
  displayName: 'Install Nuget Tool Installer'

- task: UseDotNet@2
  displayName: 'Install .NET 6.0'
  inputs:
    packageType: 'sdk'
    version: '6.0.x'

- task: UseDotNet@2
  displayName: 'Install .NET 7.0'
  inputs:
    packageType: 'sdk'
    version: '7.0.x'

- task: UseDotNet@2
  displayName: 'Install .NET 8.0'
  inputs:
    packageType: 'sdk'
    version: '8.0.x'

#- task: UseDotNet@2
#  displayName: Install .NET 3.1
#  inputs:
#    version: '3.1.x'
#    packageType: sdk
#    includePreviewVersions: false

# Add a Command To List the Current .NET SDKs (Sanity Check)
- task: CmdLine@2
  displayName: 'List available .NET SDKs'
  inputs:
    script: 'dotnet --list-sdks'

- task: NuGetCommand@2
  displayName: Install Nuget Packages
  inputs:
    restoreSolution: '$(solution)'

- task: VSBuild@1
  displayName: Build Solution
  inputs:
    solution: '$(solution)'
    platform: '$(buildPlatform)'
    configuration: '$(buildConfiguration)'

# - task: VSTest@2
#   displayName: Run Tests .NET Framework
#   inputs:
#     testSelector: 'testAssemblies'
#     testAssemblyVer2: |
#       **\*OfficeIMO.Tests.dll
#     searchFolder: '$(System.DefaultWorkingDirectory)'
#     publishRunAttachments: true
#     codeCoverageEnabled: true
#     runSettingsFile: CodeCoverage.runsettings

- task: DotNetCoreCLI@2
  displayName: 'Run Tests'
  inputs:
    command: 'test'
    arguments: --configuration $(buildConfiguration) --collect "Code coverage"
    publishTestResults: true
    projects: '**/*.Tests.csproj'
    testRunTitle: 'Windows Test Run $(buildConfiguration), CPU: $(buildPlatform)'

# - task: PublishCodeCoverageResults@1
#   displayName: 'Publish Code Coverage Report'
#   inputs:
#     codeCoverageTool: 'Cobertura'
#     summaryFileLocation: '$(Agent.TempDirectory)/**/coverage.cobertura.xml'
